#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'yaml'

def error(msg)
  puts "echo #{msg}\n"
  exit
end

class Script
  def initialize
    @script = ''
  end

  def method_missing(meth, *args, &block)
    qmeth = (meth.to_s + '?').intern
    if Options.respond_to?(qmeth)
      self << args[0] if Options.send(qmeth)
    else
      super
    end
  end

  def <<(line)
    @script << "#{line}\n"
  end

  def gem(name, version=nil)
    return unless Options.rvm?

    if name.is_a?(String)
      self << name
      return
    end

    name = name.to_s

    if version && version =~ /^-/
      action = 'uninstall'
      version.gsub!(/^-/, '')
    else
      action = 'install'
    end
    name << " -v=#{version}" if version

    self << "gem #{action} #{name}"
  end

  def chiliproject(line)
    self << line if Options.platform == 'chiliproject'
  end
  def redmine(line)
    self << line if Options.platform == 'redmine'
  end

  def to_s
    return @script
  end
end

script = Script.new

def exists(path)
  return File.exist?(File.expand_path(path))
end
def verify(path)
  error("#{path} does not exist") unless exists(path)
end

class Options
  OPTIONSFILE = File.join(File.dirname(__FILE__), File.basename(__FILE__, File.extname(__FILE__)) + '.yml')
  @@options = {}
  @@options = YAML::load_file(OPTIONSFILE) if File.exist?(OPTIONSFILE)

  OPTPARSE = OptionParser.new do |opts|
    # Set a banner, displayed at the top
    # of the help screen.
    opts.banner = "Usage: rbl-reinstall [options] file1 file2 ..."
 
    opts.on('-p', '--platform PLATFORM', 'Install platform' ) do |platform|
    end

    opts.on( '-i', '--install', 'DB root password' ) do
      @@options[:install] = true
    end

    opts.on( '-r', '--rvm', 'Re-create rvm gemset' ) do
      @@options[:rvm] = true
    end

    opts.on( '-R', '--rootpw PASSWORD', 'DB root password' ) do |pw|
      @@options[:rootpw] = pw
    end

    @@options[:user] ||= 'redmine'
    opts.on( '-U', '--user USER', 'DB user' ) do |user|
      @@options[:user] = user
    end
    opts.on( '-P', '--pw PASSWORD', 'DB password' ) do |pw|
      @@options[:pw] = pw
    end

    opts.on( '-a', '--admin PASSWORD', 'Admin password' ) do |pw|
      @@options[:admin] = pw
    end

    opts.on( '-d', '--database', 'Re-install database' ) do
      @@options[:database] = true
    end

    opts.on( '-v', '--version VERSION', 'Re-install database' ) do |version|
    end

    # This displays the help screen, all programs are
    # assumed to have this option.
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
  end

  OPTPARSE.top.each_option do |opt|
    next unless opt.long && opt.long.is_a?(Array)
    case opt.class.to_s
      when 'OptionParser::Switch::RequiredArgument'
        postfix=''
      when 'OptionParser::Switch::NoArgument'
        postfix='?'
      else
        raise "Unhandled class #{opt.class}"
    end

    switch = opt.long[0].gsub(/^-*/, '')
    eval <<-ACCESSOR
      def self.#{switch}#{postfix}
        return @@options[:#{switch}]
      end
    ACCESSOR
  end

  OPTPARSE.parse!

  @@options[:platform] = `rvm-prompt g | sed -e 's/@//'`.gsub(/[\r\n]/, '').strip
  @@options[:version] = case @@options[:platform] when 'redmine' then '1.4.1' when 'chiliproject' then '2.6.0' else nil end

  error("No platform selected") if @@options[:platform].to_s == ''
  error("Unsupported platform #{@@options[:platform].inspect}") unless ['redmine', 'chiliproject'].include?(@@options[:platform])
  error("Version not set") if Options.version.to_s == '' && Options.install?

  @@options[@@options[:platform].intern].each_pair{|k, v| @@options[k] = v if @@options[k].to_s == ''} if @@options[@@options[:platform].intern].is_a?(Hash)

  [:rvm, :install, :database].each{|option|
    @@options[option] = nil if @@options[option].to_s.strip == ''
    @@options[option] = (@@options[option].to_s.strip == 'true') if @@options[option].nil?
  }

  @@options[:install] ||= !exists("~/redmine/#{@@options[:platform]}/config/database.yml")
  @@options[:rvm] ||= (`rvm list | grep rails` == '')

  error("DB root password not set") if Options.rootpw.to_s == '' && Options.database?
  error("DB password not set") if Options.pw.to_s == '' && Options.database?
  error("DB user not set") if Options.pw.to_s == '' && Options.database?

  verify('~/redmine')
  verify("~/redmine/setup/database-#{Options.platform}.yml")
  verify("~/redmine/redmine_backlogs")
end


script << 'echo "*** PIPE OUTPUT OF THIS SCRIPT THROUGH BASH ***"'
script << 'set -e'
script << 'export RAILS_ENV=development'
script << 'cd ~/redmine'

script.install "rm -rf ~/redmine/#{Options.platform}"
script.install "cd ~/redmine"

script.redmine "svn co http://redmine.rubyforge.org/svn/tags/#{Options.version} redmine"
script.chiliproject "git clone http://github.com/chiliproject/chiliproject.git"
script.chiliproject "cd ~/redmine/chiliproject"
script.chiliproject "git fetch --tags"
script.chiliproject "git checkout v#{Options.version}"

script.install "cd ~/redmine/#{Options.platform}"
script.install "ln -s ~/redmine/redmine_backlogs ~/redmine/#{Options.platform}/vendor/plugins"
script.install "ln -s ~/redmine/redmine_backlogs/features ~/redmine/#{Options.platform}"
script.install "cp ~/redmine/setup/database-#{Options.platform}.yml ~/redmine/#{Options.platform}/config/database.yml"
script.install "echo rvm use `rvm-prompt v g` > ~/redmine/#{Options.platform}/.rvmrc"
script.install "sed -i -e\"s/gem 'capybara'/gem 'capybara', '=0.3.9'/\" Gemfile"

script.rvm "rvm --force gemset empty #{Options.platform}"

script.rvm 'rvm rubygems latest-1.8'

script.rvm "touch ~/redmine/redmine_backlogs/Gemfile.dev"
script.rvm "touch ~/redmine/#{Options.platform}/Gemfile.dev"

script.gem :rack, '1.1.1'
script.gem :rails, '2.3.14'
script.gem :i18n, '0.4.2'

script.gem :icalendar
script.gem :prawn
script.gem :holidays , '1.0.3'
script.gem :'open-uri-cached'
script.gem :nokogiri

# dev & testing
#script.gem :gherkin, '2.6.2'
script.gem :'term-ansicolor', '1.0.7'
script.gem :rubyzip, '0.9.7'

script.gem :ZenTest ,'4.5.0'
script.gem :rspec, '1.3.1'
#script.gem :'cucumber-rails', '0.3.2'
#script.gem :cucumber, '1.1.8'
script.gem :culerity, '0.2.15'

script.gem :capybara, '0.3.9'
script.gem :spork #, '0.8.5'
script.gem :database_cleaner
script.gem :redgreen
script.gem :'rspec-rails', '1.3.3'
script.gem :timecop
script.gem :thin
script.gem :mysql

script.gem :bundler

if RUBY_VERSION =~ /^1\.8\./
  script.gem :system_timer
  script.gem :rcov
else
  script.gem :simplecov
end

script.gem "bundle install --system"

script.gem :cucumber, '-1.1.9'
script.gem :gherkin, '-2.9.3'

script.gem "
    DUPLICATES=`gem list | grep -v '^rake ' | grep -v '^rack ' | grep , | wc -l`
    if [[ \"$DUPLICATES\" != \"0\" ]]; then
      echo 'Duplicate gems! Aborting installation'
      gem list | grep ,
      exit
    fi
"
script.rvm "./script/generate cucumber --skip --spork"

script.database "mysqladmin -f -u root -p#{Options.rootpw} drop #{Options.platform}"
script.database "echo \"create database #{Options.platform} character set utf8;\" | mysql -u root -p#{Options.rootpw} mysql"
script.database "echo \"create user '#{Options.user}'@'localhost' identified by '#{Options.pw}';\" | mysql -u root -p#{Options.rootpw} mysql"
script.database "echo \"grant all privileges on redmine.* to 'redmine'@'localhost';\" | mysql -u root -p#{Options.rootpw} mysql"
if exists("~/redmine/setup/#{Options.platform}.sql.gz")
  script.database "zcat ~/redmine/setup/#{Options.platform}.sql.gz | mysql -u root -p#{Options.rootpw} #{Options.platform}"
  script.database "echo \"update users set auth_source_id = NULL;\" | mysql -u root -p#{Options.rootpw} #{Options.platform}"
end

script.database "rake db:migrate"
script.database "bundle exec rake generate_session_store"
script.database "REDMINE_LANG=en rake redmine:load_default_data"
script.database "rake db:migrate:plugins"
script.database "labels=no story_trackers=Story task_tracker=Task rake redmine:backlogs:install"

if Options.admin.to_s == ''
  script.database "cd ~/redmine/#{Options.platform}"
  script.database "./script/runner \"User.find(:all).reject{|user| user.login.to_s == ''}.each{|user| user.password, user.password_confirmation = '$USERPW'; user.auth_source = nil; user.save!; puts '** password for ' + user.login + ' set to $USERPW'}\""
end

puts script
